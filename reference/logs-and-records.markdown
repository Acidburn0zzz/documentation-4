---
layout: default
title: Logs and Records
categories: [Reference, Logs and records]
published: true
alias: reference-logs-and-records.html
tags: [reference, logs, records]
---  

CFEngine  approaches monitoring and reporting from the viewpoint of 
scalability so there is no default centralization of reporting information, as 
this is untenable for more than a few hundred hosts. Instead, in the classic 
CFEngine way, every host is responsible for its own data.

On hosts, CFEngine writes numerous logs and records to its private workspace, 
referred  to as [`WORKDIR`](manuals-architecture-work-directory.html) in the 
documentation. The `outputs` directory contains a time-stamped list of outputs 
generated by `cf-agent`. These are collected by `cf-execd` and are often 
emailed as reports. However, not all hosts have an email capability or are 
online, so the reports are kept here. Reports are not tidied automatically, so 
you should delete these files after a time to avoid a build up.

[CFEngine Enterprise](manuals-enterprise-reporting.html) provides solutions 
for centralization and network-wide reporting at arbitrary scale.

## Embedded Databases

Their file extensions will vary based on which library is used to
implement them: either Tokyo Cabinet (`.tcdb`) or Quick Database Manager
(`.qdbm`).

* `cf_Audit.tcdb`

A compressed database of auditing information. This file grows very
large is auditing is switched on. By default, only minor information
about CFEngine runs are recorded. This file should be archived and
deleted regularly to avoid choking the system.   

* `cf_lastseen.tcdb`

A database of hosts that last contacted this host, or were contacted by
this host, and includes the times at which they were last observed.   

* `cf_classes.tcdb`

A database of classes that have been defined on the current host,
including their relative frequencies, scaled like a probability.   

* `checksum_digests.tcdb`

The database of hash values used in CFEngine's change management
functions.   

* `performance.tcdb`

A database of last, average and deviation times of jobs recorded by
`cf-agent`. Most promises take an immeasurably short time to check, but
longer tasks such as command execution and file copying are measured by
default. Other checks can be instrumented by setting a
`measurement_class` in the `action` body of a promise.   

* `stats.tcdb`

A database of external file attributes for change management
functionality.   

* `state/cf_lock.tcdb`

A database of active and inactive locks and their expiry times. Deleting
this database will reset all lock protections in CFEngine.   

* `state/history.tcdb`

CFEngine Enterprise maintains this long-term trend database.   

* `state/cf_observations.tcdb`

This database contains the current state of the observational history of
the host as recorded by `cf-monitord`.   

* `state/promise_compliance.tcdb`

CFEngine Enterprise database of individual promise
compliance history. The database is approximate because promise
references can change as policy is edited. It quickly approaches
accuracy as a policy goes unchanged for more than a day.   

* `state/cf_state.tcdb`

A database of persistent classes active on this current host.   

* `state/nova_measures.tcdb`

CFEngine Enterprise database of custom measurements.

* `state/nova_static.tcdb`

CFEngine Enterprise database of static system discovery data.

## State Information

The CFEngine components keep their current process identifier number in
`pid files' in the work directory. For example:

    cf-execd.pid
    cf-serverd.pid

Most other state data refer to the running condition of the host and are
generated by `cf-monitord` (`cfenvd` in earlier versions of CFEngine).

* `state/env_data`

This file contains a list of currently discovered classes and variable
values that characterize the anomaly alert environment. They are altered
by the monitor daemon.   

* `state/all_classes`

A list of all the classes that were defined the last time that CFEngine
was run.   

* `state/cf_*`

All files that begin with this prefix refer to cached data that were
observed by the monitor daemon, and may be used by `cf-agent` in
`reports` with `showstate`.

## Text logs

* `promise_summary.log`

A time-stamped log of the percentage fraction of promises kept after
each run.   

* `cf3.HOSTNAME.runlog`

A time-stamped log of when each lock was released. This shows the last
time each individual promise was verified.   

* `cfagent.HOSTNAME.log`

Although ambiguously named (for historical reasons) this log contains
the current list of setuid/setgid programs observed on the system.
CFEngine warns about new additions to this list. This log has been
deprecated.   

* `cf_value.log`

A time stamped log of the business value estimated from the execution of
the automation system.   

* `cf_notkept.log`

In CFEngine Enterprise, a list of promises, with handles and comments, that 
were not kept.

* `cf_repaired.log`

In CFEngine Enterprise, a list of promises, with handles and comments, that were repaired.

* `reports/*`

CFEngine Enterprise uses this directory as a default place for outputting
reports.

* `reports/class_notes`

Class data in csv format for export to CMDB.   

* `state/file_change.log`

A time-stamped log of which files have experienced content changes since
the last observation, as determined by the hashing algorithms in
CFEngine.   

* `state/vars.out`

CFEngine Enterprise uses this log to communicate variable data.

* `state/*_measure.log`

CFEngine Enterprise maintains user-defined logs based on specifically
promised observations of the system.
